import React from 'react';
import { View, Text, StyleSheet, ScrollView, FlatList } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { ShoppingBag, Calendar, User } from 'lucide-react-native';
import Colors from '@/constants/colors';
import Fonts from '@/constants/fonts';
import Button from '@/components/Button';
import { useOrderStore, CompletedOrder } from '@/store/order-store';
import { useAuthStore } from '@/store/auth-store';
import { useRouter } from 'expo-router';

export default function YourOrdersScreen() {
  const router = useRouter();
  const { orderHistory, getUserOrders } = useOrderStore();
  const { user, isLoggedIn } = useAuthStore();
  
  if (!isLoggedIn || !user) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.emptyContainer}>
          <Text style={styles.emptyTitle}>Please Login First</Text>
          <Text style={styles.emptyText}>You need to login to view your order history</Text>
          <Button 
            title="Go to Login" 
            onPress={() => router.push('/login')}
            style={styles.loginButton}
          />
        </View>
      </SafeAreaView>
    );
  }
  
  // Get orders for the current user
  const userOrders = getUserOrders(user.email);
  
  const renderOrderItem = ({ item }: { item: CompletedOrder }) => {
    const date = new Date(item.date);
    const formattedDate = `${date.toLocaleDateString()} ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
    
    return (
      <View style={styles.orderCard}>
        <View style={styles.orderHeader}>
          <Text style={styles.orderTitle}>Order #{item.id.slice(-4)}</Text>
          <View style={styles.dateContainer}>
            <Calendar size={14} color={Colors.textLight} />
            <Text style={styles.dateText}>{formattedDate}</Text>
          </View>
        </View>
        
        <View style={styles.orderDetails}>
          <View style={styles.customerInfo}>
            <User size={16} color={Colors.primary} />
            <Text style={styles.customerName}>{item.orderInfo.customerName}</Text>
          </View>
          
          <View style={styles.itemsList}>
            {item.items.map((orderItem) => (
              <View key={`${item.id}-${orderItem.id}`} style={styles.itemRow}>
                <Text style={styles.itemQuantity}>{orderItem.quantity}x</Text>
                <Text style={styles.itemName}>{orderItem.name}</Text>
                <Text style={styles.itemPrice}>RM {(orderItem.price * orderItem.quantity).toFixed(2)}</Text>
              </View>
            ))}
          </View>
          
          <View style={styles.totalRow}>
            <Text style={styles.totalLabel}>Total:</Text>
            <Text style={styles.totalAmount}>RM {item.totalAmount.toFixed(2)}</Text>
          </View>
        </View>
      </View>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContent}>
        <View style={styles.header}>
          <Text style={styles.title}>Your Orders</Text>
          <Text style={styles.subtitle}>View your order history</Text>
        </View>
        
        {userOrders.length > 0 ? (
          <FlatList
            data={userOrders}
            renderItem={renderOrderItem}
            keyExtractor={(item) => item.id}
            scrollEnabled={false}
          />
        ) : (
          <View style={styles.emptyContainer}>
            <ShoppingBag size={64} color={Colors.textLight} />
            <Text style={styles.emptyTitle}>No Orders Yet</Text>
            <Text style={styles.emptyText}>You haven't placed any orders yet</Text>
            <Button 
              title="Browse Menu" 
              onPress={() => router.push('/menu')}
              style={styles.browseButton}
            />
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.background,
  },
  scrollContent: {
    padding: 16,
    flexGrow: 1,
  },
  header: {
    marginBottom: 24,
  },
  title: {
    fontSize: Fonts.sizes.xxl,
    fontWeight: '700',
    color: Colors.text,
    marginBottom: 8,
  },
  subtitle: {
    fontSize: Fonts.sizes.md,
    color: Colors.textLight,
  },
  emptyContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 24,
  },
  emptyTitle: {
    fontSize: Fonts.sizes.xl,
    fontWeight: '600',
    color: Colors.text,
    marginTop: 16,
    marginBottom: 8,
  },
  emptyText: {
    fontSize: Fonts.sizes.md,
    color: Colors.textLight,
    textAlign: 'center',
    marginBottom: 24,
  },
  browseButton: {
    minWidth: 200,
  },
  loginButton: {
    minWidth: 200,
  },
  orderCard: {
    backgroundColor: Colors.card,
    borderRadius: 12,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
    overflow: 'hidden',
  },
  orderHeader: {
    backgroundColor: Colors.primary,
    padding: 12,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  orderTitle: {
    fontSize: Fonts.sizes.md,
    fontWeight: '600',
    color: Colors.background,
  },
  dateContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  dateText: {
    fontSize: Fonts.sizes.xs,
    color: Colors.background,
    marginLeft: 4,
  },
  orderDetails: {
    padding: 16,
  },
  customerInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
    paddingBottom: 12,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border,
  },
  customerName: {
    fontSize: Fonts.sizes.md,
    color: Colors.text,
    marginLeft: 8,
    fontWeight: '500',
  },
  itemsList: {
    marginBottom: 12,
  },
  itemRow: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 6,
  },
  itemQuantity: {
    fontSize: Fonts.sizes.sm,
    color: Colors.textLight,
    width: 30,
  },
  itemName: {
    fontSize: Fonts.sizes.md,
    color: Colors.text,
    flex: 1,
  },
  itemPrice: {
    fontSize: Fonts.sizes.md,
    color: Colors.primary,
    fontWeight: '500',
  },
  totalRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: Colors.border,
  },
  totalLabel: {
    fontSize: Fonts.sizes.md,
    fontWeight: '600',
    color: Colors.text,
  },
  totalAmount: {
    fontSize: Fonts.sizes.lg,
    fontWeight: '700',
    color: Colors.primary,
  },
});
